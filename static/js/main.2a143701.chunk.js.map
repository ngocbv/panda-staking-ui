{"version":3,"sources":["components/wallet.js","assets/imgs/logo_with_name.png","components/header.js","errors/error404.js","assets/imgs/logo.png","pages/stake.js","App.js","reportWebVitals.js","index.js"],"names":["SolWalletProvider","children","network","WalletAdapterNetwork","Devnet","wallets","useMemo","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","endpoint","process","WalletProvider","autoConnect","require","Header","className","href","width","src","logo","Error404","to","SystemProgram","web3","SYSVAR_CLOCK_PUBKEY","Keypair","programID","PublicKey","idl","metadata","address","poolPubkey","opts","Stake","useState","selectedSTab","selectedUSTab","selectedTab","setSelectedTab","pandaStakeAmount","setPandaStakeAmount","pandaUnstakeAmount","setPandaUnstakeAmount","setTotalStackedPHANT","earn","setEarn","balance","setBalance","stakedAmount","setStakedAmount","stakeTimestamp","setStakeTimestamp","connection","useConnection","wallet","useWallet","getProvider","a","provider","Provider","amount","parseFloat","isNaN","toast","error","theme","getTokenBalance","maxAmount","program","Program","account","pool","fetch","poolObject","findProgramAddress","toBuffer","_poolSigner","poolSigner","publicKey","_userPubkey","user","message","toBase58","createStakeAccount","stakingMintObject","Token","TOKEN_PROGRAM_ID","payer","getOrCreateAssociatedAccountInfo","stakingAccountInfo","stakingPubkey","rpc","stake","BN","LAMPORTS_PER_SOL","accounts","stakingVault","owner","stakeFromAccount","clock","tokenProgram","success","refreshPage","console","log","getStakedBalance","unstake","userPubkey","claim","rewardAVault","rewardAAccount","rewardBAccount","pubkey","getTokenAccountsByOwner","mint","tokens","value","length","token","pop","getTokenAccountBalance","val","uiAmount","toFixed","getTotalStakedBalance","accountData","stakeTime","toNumber","Number","parseInt","balanceStaked","toString","programId","_userNonce","createUser","systemProgram","getEarned","lastUpdated","lastUpdateTime","now","Date","getTime","diff","rewardBRate","rewardB","useEffect","style","textAlign","height","sizes","decoding","pandaIcon","maxWidth","marginLeft","fontWeight","padding","borderWidth","borderStyle","borderRadius","onClick","e","outline","role","aria-orientation","aria-selected","hidden","paddingTop","data-gatsby-image-wrapper","display","type","alt","objectFit","opacity","placeholder","onChange","target","setMaxValue","viewBox","focusable","aria-hidden","fill","d","fontSize","marginTop","setUnstakeMaxValue","date","disabled","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y0BA0Be,SAASA,EAAT,GAAiD,IAAD,IAAnBC,gBAAmB,MAAR,KAAQ,EAErDC,EAAUC,IAAqBC,OAQ/BC,EAAUC,mBAAQ,iBAAM,CAC1BC,cACAC,cACAC,cACAC,YAAe,CACXC,QAAS,CAAEC,SAAU,gDAEzBC,cACAC,YAAgB,CAAEZ,YAClBa,YAAyB,CAAEb,eAC5B,CAACA,IAGJ,OACI,cAACc,EAAA,EAAD,CAAoBC,SAlBPC,sCAkBb,SACI,cAACC,EAAA,EAAD,CAAgBd,QAASA,EAASe,aAAW,EAA7C,SACKnB,MA5BjBoB,EAAQ,K,WCxBO,MAA0B,2CCU1B,SAASC,IACpB,OACI,qBAAKC,UAAU,aAAf,SACI,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,2BAAf,SACI,qBAAKA,UAAU,0BAAf,SACI,mBAAGC,KAAK,IAAR,SACE,qBAAKC,MAAM,MAAMC,IAAKC,EAAMJ,UAAU,eAIhD,qBAAKA,UAAU,2BAAf,SACI,cAAC,IAAD,UACI,cAAC,IAAD,QAGR,qBAAKA,UAAU,oCCxBnC,IASeK,EATE,kBACb,gCACI,kDACA,cAAC,IAAD,CAAMC,GAAG,IAAT,yB,yECNO,G,OAAA,IAA0B,kC,0BCkBzCR,EAAQ,K,IAEAS,EAAgDC,IAAhDD,cAAwBE,GAAwBD,IAAjCE,QAAiCF,IAAxBC,qBAC1BE,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SACvCC,EAAa,IAAIJ,YAAUjB,gDAC3BsB,EACmB,YAEV,SAASC,IAAS,IAAD,EACYC,mBAAS,GADrB,mBACrBC,EADqB,aAEcD,mBAAS,IAFvB,mBAErBE,EAFqB,aAGUF,mBAAS,IAHnB,mBAGrBG,EAHqB,KAGRC,EAHQ,OAIoBJ,mBAAS,IAJ7B,mBAIrBK,EAJqB,KAIHC,EAJG,OAKwBN,mBAAS,IALjC,mBAKrBO,EALqB,KAKDC,EALC,OAMsBR,mBAAS,GAN/B,mBAMFS,GANE,aAOwBT,mBAAS,GAPjC,gCAQJA,mBAAS,IARL,mBAQrBU,EARqB,KAQfC,EARe,OASEX,mBAAS,GATX,mBASrBY,EATqB,KASZC,EATY,OAUYb,mBAAS,GAVrB,mBAUrBc,EAVqB,KAUPC,EAVO,QAWgBf,mBAAS,GAXzB,qBAWrBgB,GAXqB,MAWLC,GAXK,MAapBC,GAAeC,cAAfD,WAEFE,GAASC,cAfa,SAgBbC,KAhBa,8EAgB5B,4BAAAC,EAAA,6DACUC,EAAW,IAAIC,IACjBP,GAAYE,GAAQtB,GAF5B,kBAIW0B,GAJX,4CAhB4B,oEAuB5B,wDAAAD,EAAA,yDACQG,EAASC,WAAWtB,IACpBuB,MAAMF,IAAsB,IAAXA,EAFzB,uBAGQG,IAAMC,MAAM,kBAAmB,CAAEC,MAAO,SAHhD,0CAO4BC,GAAgB,IAAIvC,YAAUjB,iDAP1D,UAOUyD,EAPV,SAQQP,EAASO,GARjB,wBASQJ,IAAMC,MAAM,2BAA4B,CAAEC,MAAO,SATzD,4CAa2BT,KAb3B,eAaUE,EAbV,OAeUU,EAAU,IAAIC,IAAQzC,EAAKF,EAAWgC,GAfhD,UAgB2BU,EAAQE,QAAQC,KAAKC,MAAMzC,GAhBtD,eAgBQ0C,EAhBR,iBAqBc9C,YAAU+C,mBAChB,CAAC3C,EAAW4C,YACZjD,GAvBR,2CAmBQkD,EAnBR,UAyBQC,EAAaD,EAzBrB,UA6BcjD,YAAU+C,mBAChB,CAACpB,GAAOwB,UAAUH,WAAY5C,EAAW4C,YACzCjD,GA/BR,2CA4BQqD,EA5BR,8BAmCcX,EAAQE,QAAQU,KAAKR,MAAMO,GAnCzC,8DAqCY,KAAEE,SAAW,0BAA4BF,EAAYG,WArCjE,kCAsCkBC,KAtClB,yBA2CcC,EAAoB,IAAIC,IAC1B3B,EAASN,WACT,IAAIzB,YAAUjB,gDACd4E,IACA5B,EAASJ,OAAOiC,OA/C5B,UAgDyCH,EAAkBI,iCAAiClC,GAAOwB,WAhDnG,eAgDcW,EAhDd,OAiDcC,EAAgBD,EAAmB3D,QAjDjD,UAmDcsC,EAAQuB,IAAIC,MACd,IAAIC,IAAGjC,EAASrC,IAAKuE,kBACrB,CACIC,SAAU,CAENxB,KAAMxC,EACNiE,aAAcvB,EAAWuB,aAEzBhB,KAAMD,EACNkB,MAAO3C,GAAOwB,UACdoB,iBAAkBR,EAElBb,aAEAsB,MAAO3E,EACP4E,aAAcd,OAlElC,eAsEQvB,IAAMsC,QAAQ,4BAA6B,CAAEpC,MAAO,SACpDzB,EAAoB,GAvE5B,UAwEc8D,KAxEd,2DA0EQC,QAAQC,IAAI,sBAAZ,MACAzC,IAAMC,MAAM,sCAAuC,CAAEC,MAAO,SA3EpE,oEAvB4B,oEAsG5B,wDAAAR,EAAA,yDAEQG,EAASC,WAAWpB,IACpBqB,MAAMF,IAAsB,IAAXA,EAHzB,uBAIQG,IAAMC,MAAM,iBAAkB,CAAEC,MAAO,SAJ/C,0CAQ4BwC,KAR5B,UAQUtC,EARV,SASQP,EAASO,GATjB,wBAUQJ,IAAMC,MAAM,2BAA4B,CAAEC,MAAO,SAVzD,4CAc2BT,KAd3B,eAcUE,EAdV,OAgBUU,EAAU,IAAIC,IAAQzC,EAAKF,EAAWgC,GAhBhD,UAiB2BU,EAAQE,QAAQC,KAAKC,MAAMzC,GAjBtD,eAiBQ0C,EAjBR,iBAsBc9C,YAAU+C,mBAChB,CAAC3C,EAAW4C,YACZjD,GAxBR,2CAoBQkD,EApBR,UA0BQC,EAAaD,EA1BrB,UA8BcjD,YAAU+C,mBAChB,CAACpB,GAAOwB,UAAUH,WAAY5C,EAAW4C,YACzCjD,GAhCR,2CA6BQqD,EA7BR,oBAoCcK,EAAoB,IAAIC,IAC1B3B,EAASN,WACT,IAAIzB,YAAUjB,gDACd4E,IACA5B,EAASJ,OAAOiC,OAxC5B,UAyCyCH,EAAkBI,iCAAiClC,GAAOwB,WAzCnG,eAyCcW,EAzCd,OA0CcC,EAAgBD,EAAmB3D,QA1CjD,UA4CcsC,EAAQuB,IAAIe,QACd,IAAIb,IAAGjC,EAASrC,IAAKuE,kBACrB,CACIC,SAAU,CAENxB,KAAMxC,EACNiE,aAAcvB,EAAWuB,aAEzBhB,KAAMD,EACNkB,MAAO3C,GAAOwB,UACdoB,iBAAkBR,EAElBb,aAEAsB,MAAO3E,EACP4E,aAAcd,OA3DlC,eA8DQvB,IAAMsC,QAAQ,8BAA+B,CAAEpC,MAAO,SA9D9D,UA+DcqC,KA/Dd,QAgEQ5D,EAAsB,GAhE9B,mDAkEQ6D,QAAQC,IAAI,sBAAZ,MACAzC,IAAMC,MAAM,sCAAuC,CAAEC,MAAO,SAnEpE,4DAtG4B,oEA6K5B,oDAAAR,EAAA,sEAE2BD,KAF3B,cAEUE,EAFV,OAIUU,EAAU,IAAIC,IAAQzC,EAAKF,EAAWgC,GAJhD,SAM2BU,EAAQE,QAAQC,KAAKC,MAAMzC,GANtD,cAMQ0C,EANR,OAQUW,EAAoB,IAAIC,IAC1B3B,EAASN,WACT,IAAIzB,YAAUjB,gDACd4E,IACA5B,EAASJ,OAAOiC,OAZxB,UAaqCH,EAAkBI,iCAAiClC,GAAOwB,WAb/F,eAaUW,EAbV,OAcUC,EAAgBD,EAAmB3D,QAd7C,UAmBcH,YAAU+C,mBAChB,CAAC3C,EAAW4C,YACZjD,GArBR,2CAiBQkD,EAjBR,UAuBQC,EAAaD,EAvBrB,UA2BcjD,YAAU+C,mBAChB,CAAChB,EAASJ,OAAOwB,UAAUH,WAAY5C,EAAW4C,YAClDjD,GA7BR,2CA0BQiF,EA1BR,8BAkCcvC,EAAQuB,IAAIiB,MAAM,CACpBb,SAAU,CAENxB,KAAMxC,EACNiE,aAAcvB,EAAWuB,aACzBa,aAAcpC,EAAWoC,aAEzB7B,KAAM2B,EACNV,MAAOvC,EAASJ,OAAOwB,UACvBgC,eAAgBpB,EAChBqB,eAAgBrB,EAEhBb,aAEAsB,MAAO5E,IAAKC,oBACZ4E,aAAcd,OAjD9B,QAoDQvB,IAAMsC,QAAQ,4BAA6B,CAAEpC,MAAO,SACpDpB,EAAQ,GArDhB,mDAuDMkB,IAAMC,MAAM,sCAAuC,CAAEC,MAAO,SAvDlE,yBA0DiBC,GAAgB,IAAIvC,YAAUjB,iDA1D/C,qGA7K4B,+BAyRbwD,GAzRa,iFAyR5B,WAA+B8C,GAA/B,uBAAAvD,EAAA,yDACSH,GAAOwB,UADhB,yCAEe,GAFf,uBAK2BtB,KAL3B,cAKUE,EALV,gBAMyBA,EAASN,WAAW6D,wBAAwB3D,GAAOwB,UAAW,CAAEoC,KAAMF,IAN/F,UAO+B,IADrBG,EANV,QAOeC,MAAMC,OAPrB,0CAQe,GARf,eAUUC,EAAQH,EAAOC,MAAMG,MAV/B,UAWuB7D,EAASN,WAAWoE,uBAAuBF,EAAMN,QAXxE,eAWUS,EAXV,OAWiFL,MACvEtE,EAAU2E,EAAIC,SAZxB,kBAcW7D,WAAWf,EAAQ6E,QAAQ,KAdtC,6CAzR4B,+BA0SbC,GA1Sa,iFA0S5B,WAAqCZ,GAArC,6BAAAvD,EAAA,sEAC2BD,KAD3B,cACUE,EADV,gBAMc/B,YAAU+C,mBAChB,CAAC3C,EAAW4C,YACZjD,GARR,0CAIQkD,EAJR,UAUQC,EAAaD,EAVrB,UAYyBlB,EAASN,WAAW6D,wBACrCpC,EAAY,CAAEqC,KAAMF,IAb5B,WAe+B,IAHrBG,EAZV,QAeeC,MAAMC,OAfrB,0CAgBe,GAhBf,eAkBUC,EAAQH,EAAOC,MAAMG,MAlB/B,UAmB2B7D,EAASN,WAAWoE,uBAAuBF,EAAMN,QAnB5E,eAmBUlE,EAnBV,OAmBqFsE,MAAMM,SAASC,QAAQ,GAnB5G,kBAoBW9D,WAAWf,IApBtB,6CA1S4B,+BAgVb2D,KAhVa,8EAgV5B,sCAAAhD,EAAA,sEAE2BD,KAF3B,cAEUE,EAFV,OAIUU,EAAU,IAAIC,IAAQzC,EAAKF,EAAWgC,GAJhD,SAQc/B,YAAU+C,mBAChB,CAACpB,GAAOwB,UAAUH,WAAY5C,EAAW4C,YACzCjD,GAVR,0CAOQqD,EAPR,8BAckCX,EAAQE,QAAQU,KAAKR,MAAMO,GAd7D,eAcc8C,EAdd,OAeQ1E,GAAqD,IAAnC0E,EAAYC,UAAUC,YAfhD,mBAgBgBC,OAAOC,SAASJ,EAAYK,cAAcC,YAAc5G,IAAKuE,kBAAkB6B,QAAQ,IAhBvG,0CAkBQpB,QAAQC,IAAI,KAAEvB,SAlBtB,kBAmBe,GAnBf,4DAhV4B,oEAwW5B,sBAAAxB,EAAA,kEACIjB,EADJ,SAC8B0B,GAAgB,IAAIvC,YAAUjB,iDAD5D,8EAxW4B,oEA4W5B,sBAAA+C,EAAA,kEACIf,EADJ,SACgC+D,KADhC,8EA5W4B,+BAgXbtB,KAhXa,8EAgX5B,sCAAA1B,EAAA,sEAC2BD,KAD3B,cACUE,EADV,OAEUU,EAAU,IAAIC,IAAQzC,EAAKF,EAAWgC,GAFhD,SAMc/B,YAAU+C,mBAChB,CAAChB,EAASJ,OAAOwB,UAAUH,WAAY5C,EAAW4C,YAClDP,EAAQgE,WARhB,0CAKQrD,EALR,KAKqBsD,EALrB,yBAYcjE,EAAQuB,IAAI2C,WAAWD,EAAY,CACrCtC,SAAU,CACNxB,KAAMxC,EACNiD,KAAMD,EACNkB,MAAOvC,EAASJ,OAAOwB,UACvByD,cAAejH,EAAc8G,aAjB7C,2DAqByB,iIAAb,KAAEnD,SACFlB,IAAMC,MAAM,0CAA2C,CAAEC,MAAO,SAtB5E,4DAhX4B,+BA2YbuE,KA3Ya,8EA2Y5B,8CAAA/E,EAAA,sEAC2BD,KAD3B,UACUE,EADV,OAEUU,EAAU,IAAIC,IAAQzC,EAAKF,EAAWgC,GAEnB,OAArBJ,GAAOwB,UAJf,iEAacnD,YAAU+C,mBAChB,CAACpB,GAAOwB,UAAUH,WAAY5C,EAAW4C,YACzCjD,GAfR,0CAYQqD,EAZR,eAkBIhC,EAlBJ,UAkBqBmB,GAAgB,IAAIvC,YAAUjB,iDAlBnD,+CAmBIuC,EAnBJ,UAmB0BwD,KAnB1B,8DAqBkCrC,EAAQE,QAAQU,KAAKR,MAAMO,GArB7D,QAqBc8C,EArBd,OAsBYY,EAAcZ,EAAYa,eAAeX,WACzCY,EAAMV,UAAU,IAAIW,MAAQC,UAAY,KACxCC,EAAOH,EAAMF,EAEbhB,EAAOO,OAAOC,SAASJ,EAAYkB,YAAYZ,YAAc5G,IAAKuE,iBAAoBgD,EAC1FrB,GAAOO,OAAOC,SAASJ,EAAYmB,QAAQb,YAAc5G,IAAKuE,iBAC9DjD,EAAQ4E,EAAIE,QAAQ,IA5B5B,+GA3Y4B,sBA6a5B,IAAMrB,GAAW,uCAAG,4BAAA7C,EAAA,sEAEMmE,GAAsB,IAAIjG,YAAUjB,iDAF1C,cAEVoC,EAFU,OAGhBH,EAAqBG,GAHL,SAQV0F,KARU,iCAUT,eAVS,2CAAH,qDAiBjB,OAFAS,oBAAU3C,GAAa,CAAChD,KAGpB,gCACI,cAAC,IAAD,IACA,oBAAI4F,MAAO,CAACC,UAAW,UAAvB,6BACA,sBAAKpI,UAAU,aAAf,UACI,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,cAAf,SACI,qBAAKA,UAAU,0BAAf,SACI,qBAAKA,UAAU,0BAAf,SACI,+BACI,qBAAIA,UAAU,iCAAd,8BAAiE+B,EAAjE,OACA,sBAAK/B,UAAU,2BAAf,UACI,8BACI,qBAAKE,MAAM,KAAKmI,OAAO,KAAKC,MAAM,gCAAgCC,SAAS,QAAQpI,IAAKqI,EAAWL,MAAO,CAAEM,SAAU,QAE1H,oBAAIzI,UAAU,kCAAkCmI,MAAO,CAACO,WAAY,IAApE,SACI,qBAAK1I,UAAU,0BAAf,SACI,2CAGR,sBAAKmI,MAAO,CAAEO,WAAY,IAA1B,UACE,iDACA,sBAAMP,MAAO,CAACQ,WAAY,QAA1B,SAAoC9G,IACpC,6CAEF,qBAAKsG,MAAO,CAAEO,WAAY,GAAIE,QAAS,EAAGC,YAAa,EAAGC,YAAa,QAASC,aAAc,GAA9F,SACI,wBAAQC,QAAS,SAACC,GAAD,OAzdjC,2CAydwCpD,IAAxB,sCAOvB,OA2CT,qBAAKsC,MAAO,CAAEe,QAAS,QAAvB,SACI,sBAAKlJ,UAAU,yBAAf,UACI,sBAAKmJ,KAAK,UAAUC,mBAAiB,aAAapJ,UAAU,mCAA5D,UACI,wBACIqJ,gBAA8B,GAAf/H,EACftB,UAAU,8BACVgJ,QAAS,SAACC,GAAD,OAAO1H,EAAe,IAHnC,mBAKA,wBACI8H,gBAA8B,GAAf/H,EACftB,UAAU,8BACVgJ,QAAS,SAACC,GAAD,OAAO1H,EAAe,IAHnC,wBAMJ,sBAAKvB,UAAU,sCAAf,UACI,qBAAKA,UAAU,oCAAoCsJ,OAAwB,IAAhBhI,EAA3D,SACI,qBAAKtB,UAAU,2BAAf,SACI,qBAAKA,UAAU,2BAAf,SACI,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,0BAAf,UACI,qBAAKmI,MAAO,CAACoB,WAAY,IAAzB,uCAC0BtH,EAD1B,YAGA,sBAAKjC,UAAU,qCAAf,UACI,qBAAKA,UAAU,oCAAoCsJ,OAAyB,IAAjBlI,EAA3D,SACI,sBAAKpB,UAAU,QAAf,UACI,qBAAKA,UAAU,aAAf,SACI,sBAAKA,UAAU,aAAf,UACI,sBAAKA,UAAU,2BAAf,UACI,qBAAKwJ,4BAA0B,GAAGxJ,UAAU,wDAA5C,SACI,qBAAKmI,MAAO,CAAEM,SAAU,GAAIgB,QAAS,QAASvJ,MAAO,GAAImI,OAAQ,IAAjE,SACI,oCACI,wBAAQqB,KAAK,YAAYvJ,IAAKqI,EAAWF,MAAM,kCAC/C,qBAAKpI,MAAM,KAAKmI,OAAO,KAAKC,MAAM,gCAAgCC,SAAS,QAAQpI,IAAKqI,EAAWmB,IAAI,OAAOxB,MAAO,CAAEyB,UAAW,QAASC,QAAS,EAAGpB,SAAU,aAI7K,mBAAGzI,UAAU,yBAAb,sBAEJ,sBAAKA,UAAU,iCAAf,UACI,uBAAOA,UAAU,aAAa8J,YAAY,MAAMJ,KAAK,OAAOrD,MAAO7E,EAAkBuI,SAAU,SAAAd,GAAC,OAAIxH,EAAoBwH,EAAEe,OAAO3D,UACjI,qBAAKrG,UAAU,yCAAf,SACI,wBACI0J,KAAK,SACL1J,UAAU,2BACVgJ,QAAS,SAAAC,GAAC,OAxjB1D,2CAwjB8DgB,IAHlB,2BAShB,yBAAQP,KAAK,SAAS1J,UAAU,2BAA2BgJ,QAAS,kBA9jBhG,2CA8jBsGnE,IAA1E,kBAEI,sBAAM7E,UAAU,kCAAhB,SACI,qBAAKkK,QAAQ,YAAYC,UAAU,QAAQnK,UAAU,yBAAyBoK,cAAY,OAA1F,SACI,sBAAMC,KAAK,eAAeC,EAAE,qEAIxC,qBAAKnC,MAAO,CAACoC,SAAU,GAAIC,UAAW,IAAtC,yFAGR,sBAAKxK,UAAU,oCAAoCsJ,OAAyB,IAAjBlI,EAA3D,UACI,wEACA,0FAQ5B,qBAAKpB,UAAU,oCAAoCsJ,OAAwB,IAAhBhI,EAA3D,SACI,qBAAKtB,UAAU,2BAAf,SACI,qBAAKA,UAAU,2BAAf,SACI,qBAAKA,UAAU,cAAf,SACI,sBAAKA,UAAU,0BAAf,UACI,qBAAKmI,MAAO,CAACoB,WAAY,IAAzB,uCAC0BtH,EAD1B,YAGA,qBAAKjC,UAAU,qCAAf,SACI,qBAAKA,UAAU,oCAAoCsJ,OAA0B,IAAlBjI,EAA3D,SACI,sBAAKrB,UAAU,QAAf,UACI,qBAAKA,UAAU,aAAf,SACI,sBAAKA,UAAU,aAAf,UACI,sBAAKA,UAAU,2BAAf,UACI,qBAAKwJ,4BAA0B,GAAGxJ,UAAU,wDAA5C,SACI,qBAAKmI,MAAO,CAAEM,SAAU,GAAIgB,QAAS,QAASvJ,MAAO,GAAImI,OAAQ,IAAjE,SACI,oCACI,wBAAQqB,KAAK,YAAYvJ,IAAKqI,EAAWF,MAAM,kCAC/C,qBAAKpI,MAAM,KAAKmI,OAAO,KAAKC,MAAM,gCAAgCC,SAAS,QAAQpI,IAAKqI,EAAWmB,IAAI,OAAOxB,MAAO,CAAEyB,UAAW,QAASC,QAAS,EAAGpB,SAAU,aAI7K,mBAAGzI,UAAU,yBAAb,sBAEJ,sBAAKA,UAAU,iCAAf,UACI,uBAAOA,UAAU,aAAa8J,YAAY,MAAMJ,KAAK,OAAOrD,MAAO3E,EAAoBqI,SAAU,SAAAd,GAAC,OAAItH,EAAsBsH,EAAEe,OAAO3D,UACrI,qBAAKrG,UAAU,yCAAf,SACI,wBACI0J,KAAK,SACL1J,UAAU,2BACVgJ,QAAS,SAAAC,GAAC,OAjnB1D,2CAinB8DwB,IAHlB,2BAShB,gCACE,oDACA,+BAAO,MACP,sBAAMtC,MAAO,CAACQ,WAAY,QAA1B,SACE,cAAC,IAAD,CAAW+B,KAAMvI,GAAiB,WAEpC,+BAAO,MACP,iDAEF,yBAAQwI,SAAUxI,GAAiB,OAAwB0F,KAAKD,MAAO8B,KAAK,SAAS1J,UAAU,2BAA2BgJ,QAAS,kBAhoB/J,2CAgoBqKrD,IAAzI,wBAEI,sBAAM3F,UAAU,kCAAhB,SACI,qBAAKkK,QAAQ,YAAYC,UAAU,QAAQnK,UAAU,yBAAyBoK,cAAY,OAA1F,SACI,sBAAMC,KAAK,eAAeC,EAAE,qG,OCloBrFM,MApBf,WACE,OACE,cAACnM,EAAD,UACE,qBAAKuB,UAAU,MAAf,SACE,qBAAKmI,MAAO,CAAEe,QAAS,QAAvB,SACE,sBAAKlJ,UAAU,cAAf,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6K,OAAK,EAACC,KAAK,IAAIC,UAAW7J,IACjC,cAAC,IAAD,CAAO6J,UAAW1K,mBCNnB2K,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2a143701.chunk.js","sourcesContent":["import React, { FC, useMemo } from 'react';\r\nimport {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n    useConnection,\r\n    useWallet\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolletExtensionWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n} from '@solana/wallet-adapter-react-ui';\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\n\r\n// Default styles that can be overridden by your app\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nexport default function SolWalletProvider({ children = null }) {\r\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\r\n    const network = WalletAdapterNetwork.Devnet;\r\n\r\n    // You can also provide a custom RPC endpoint\r\n    // const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n    const endpoint = process.env.REACT_APP_CLUSTER;\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\r\n    // Only the wallets you configure here will be compiled into your application\r\n    const wallets = useMemo(() => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getTorusWallet({\r\n            options: { clientId: 'Get a client ID @ https://developer.tor.us' }\r\n        }),\r\n        getLedgerWallet(),\r\n        getSolletWallet({ network }),\r\n        getSolletExtensionWallet({ network }),\r\n    ], [network]);\r\n\r\n\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets} autoConnect>\r\n                {children}\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};","export default __webpack_public_path__ + \"static/media/logo_with_name.3bb1bbb8.png\";","import * as React from 'react';\r\nimport Wallet from './wallet';\r\nimport '../styles/Header.css';\r\nimport logo from '../assets/imgs/logo_with_name.png';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n    WalletMultiButton\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"css-m7wkyr\">\r\n            <div className=\"css-1kj7ifn\">\r\n                <div className=\"css-1j66gwz\">\r\n                    <div className=\"chakra-stack css-1i0wgq1\">\r\n                        <div className=\"chakra-stack css-oft45e\">\r\n                            <a href=\"/\">\r\n                              <img width=\"200\" src={logo} className=\"logo\"></img>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chakra-stack css-1u6kme8\">\r\n                        <WalletModalProvider>\r\n                            <WalletMultiButton />\r\n                        </WalletModalProvider>\r\n                    </div>\r\n                    <div className=\"chakra-stack css-1buqvcx\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Error404 = () => (\r\n    <div>\r\n        <h1>404 - Not Found!</h1>\r\n        <Link to=\"/\">\r\n            Go Home\r\n        </Link>\r\n    </div>\r\n);\r\n\r\nexport default Error404;","export default __webpack_public_path__ + \"static/media/logo.e4a9cce6.png\";","import React, { useState, useEffect } from 'react';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Countdown from \"react-countdown\";\r\n\r\nimport { Connection, PublicKey } from '@solana/web3.js';\r\nimport { Program, Provider, web3, BN } from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\r\n\r\nimport '../styles/Stake.css';\r\nimport pandaIcon from '../assets/imgs/logo.png';\r\nimport idl from '../json/idl.json';\r\n\r\nimport {\r\n    useWallet,\r\n    useConnection\r\n} from '@solana/wallet-adapter-react';\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nconst { SystemProgram, Keypair, SYSVAR_CLOCK_PUBKEY } = web3;\r\nconst programID = new PublicKey(idl.metadata.address);\r\nconst poolPubkey = new PublicKey(process.env.REACT_APP_POOL)\r\nconst opts = {\r\n    preflightCommitment: \"processed\"\r\n}\r\nexport default function Stake() {\r\n    const [selectedSTab, setSelectedSTab] = useState(0);\r\n    const [selectedUSTab, setSelectedUSTab] = useState(0);\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const [pandaStakeAmount, setPandaStakeAmount] = useState('');\r\n    const [pandaUnstakeAmount, setPandaUnstakeAmount] = useState('');\r\n    const [totalStackedPHANT, setTotalStackedPHANT] = useState(0.0);\r\n    const [totalUnstakedPHANT, setTotalUnstakedPHANT] = useState(0.0);\r\n    const [earn, setEarn] = useState(0.0);\r\n    const [balance, setBalance] = useState(0.0);\r\n    const [stakedAmount, setStakedAmount] = useState(0.0);\r\n    const [stakeTimestamp, setStakeTimestamp] = useState(0);\r\n\r\n    const { connection } = useConnection();\r\n\r\n    const wallet = useWallet();\r\n    async function getProvider() {\r\n        const provider = new Provider(\r\n            connection, wallet, opts.preflightCommitment,\r\n        );\r\n        return provider;\r\n    }\r\n\r\n    async function stake() {\r\n        let amount = parseFloat(pandaStakeAmount);\r\n        if (isNaN(amount) || amount === 0) {\r\n            toast.error(\"Amount is zero.\", { theme: \"dark\" });\r\n            return;\r\n        }\r\n\r\n        const maxAmount = await getTokenBalance(new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID));\r\n        if (amount > maxAmount) {\r\n            toast.error(\"Not enough token amount.\", { theme: \"dark\" });\r\n            return;\r\n        }\r\n\r\n        const provider = await getProvider()\r\n\r\n        const program = new Program(idl, programID, provider);\r\n        let poolObject = await program.account.pool.fetch(poolPubkey);\r\n\r\n        const [\r\n            _poolSigner,\r\n            _nonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n        let poolSigner = _poolSigner;\r\n\r\n        const [\r\n            _userPubkey, _userNonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [wallet.publicKey.toBuffer(), poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n\r\n        try {\r\n            await program.account.user.fetch(_userPubkey);\r\n        } catch (e) {\r\n            if (e.message == 'Account does not exist ' + _userPubkey.toBase58()) {\r\n                await createStakeAccount();\r\n            }\r\n        }\r\n\r\n        try {\r\n            const stakingMintObject = new Token(\r\n                provider.connection,\r\n                new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID),\r\n                TOKEN_PROGRAM_ID,\r\n                provider.wallet.payer);\r\n            const stakingAccountInfo = await stakingMintObject.getOrCreateAssociatedAccountInfo(wallet.publicKey);\r\n            const stakingPubkey = stakingAccountInfo.address;\r\n\r\n            await program.rpc.stake(\r\n                new BN(amount * web3.LAMPORTS_PER_SOL),\r\n                {\r\n                    accounts: {\r\n                        // Stake instance.\r\n                        pool: poolPubkey,\r\n                        stakingVault: poolObject.stakingVault,\r\n                        // User.\r\n                        user: _userPubkey,\r\n                        owner: wallet.publicKey,\r\n                        stakeFromAccount: stakingPubkey,\r\n                        // Program signers.\r\n                        poolSigner,\r\n                        // Misc.\r\n                        clock: SYSVAR_CLOCK_PUBKEY,\r\n                        tokenProgram: TOKEN_PROGRAM_ID,\r\n                    },\r\n                }\r\n            );\r\n            toast.success(\"Stake PANDA successfully!\", { theme: \"dark\" });\r\n            setPandaStakeAmount(0);\r\n            await refreshPage();\r\n        } catch (err) {\r\n            console.log(\"Transaction error: \", err);\r\n            toast.error(\"Transaction error, try again later!\", { theme: \"dark\" });\r\n        }\r\n    }\r\n\r\n    async function unstake() {\r\n\r\n        let amount = parseFloat(pandaUnstakeAmount);\r\n        if (isNaN(amount) || amount === 0) {\r\n            toast.error(\"Amount is zero\", { theme: \"dark\" });\r\n            return;\r\n        }\r\n\r\n        const maxAmount = await getStakedBalance();\r\n        if (amount > maxAmount) {\r\n            toast.error(\"Not enough token amount.\", { theme: \"dark\" });\r\n            return;\r\n        }\r\n\r\n        const provider = await getProvider()\r\n\r\n        const program = new Program(idl, programID, provider);\r\n        let poolObject = await program.account.pool.fetch(poolPubkey);\r\n\r\n        const [\r\n            _poolSigner,\r\n            _nonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n        let poolSigner = _poolSigner;\r\n\r\n        const [\r\n            _userPubkey, _userNonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [wallet.publicKey.toBuffer(), poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n        try {\r\n\r\n            const stakingMintObject = new Token(\r\n                provider.connection,\r\n                new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID),\r\n                TOKEN_PROGRAM_ID,\r\n                provider.wallet.payer);\r\n            const stakingAccountInfo = await stakingMintObject.getOrCreateAssociatedAccountInfo(wallet.publicKey);\r\n            const stakingPubkey = stakingAccountInfo.address;\r\n\r\n            await program.rpc.unstake(\r\n                new BN(amount * web3.LAMPORTS_PER_SOL),\r\n                {\r\n                    accounts: {\r\n                        // Stake instance.\r\n                        pool: poolPubkey,\r\n                        stakingVault: poolObject.stakingVault,\r\n                        // User.\r\n                        user: _userPubkey,\r\n                        owner: wallet.publicKey,\r\n                        stakeFromAccount: stakingPubkey,\r\n                        // Program signers.\r\n                        poolSigner,\r\n                        // Misc.\r\n                        clock: SYSVAR_CLOCK_PUBKEY,\r\n                        tokenProgram: TOKEN_PROGRAM_ID,\r\n                    },\r\n                });\r\n            toast.success(\"Unstake PANDA successfully!\", { theme: \"dark\" });\r\n            await refreshPage();\r\n            setPandaUnstakeAmount(0);\r\n        } catch (err) {\r\n            console.log(\"Transaction error: \", err);\r\n            toast.error(\"Transaction error, try again later!\", { theme: \"dark\" });\r\n        }\r\n    }\r\n\r\n    async function claim() {\r\n\r\n        const provider = await getProvider()\r\n\r\n        const program = new Program(idl, programID, provider);\r\n\r\n        let poolObject = await program.account.pool.fetch(poolPubkey);\r\n\r\n        const stakingMintObject = new Token(\r\n            provider.connection,\r\n            new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID),\r\n            TOKEN_PROGRAM_ID,\r\n            provider.wallet.payer);\r\n        const stakingAccountInfo = await stakingMintObject.getOrCreateAssociatedAccountInfo(wallet.publicKey);\r\n        const stakingPubkey = stakingAccountInfo.address;\r\n\r\n        const [\r\n            _poolSigner,\r\n            _nonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n        let poolSigner = _poolSigner;\r\n\r\n        const [\r\n            userPubkey, _userNonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [provider.wallet.publicKey.toBuffer(), poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n\r\n        try {\r\n\r\n            await program.rpc.claim({\r\n                accounts: {\r\n                    // Stake instance.\r\n                    pool: poolPubkey,\r\n                    stakingVault: poolObject.stakingVault,\r\n                    rewardAVault: poolObject.rewardAVault,\r\n                    // User.\r\n                    user: userPubkey,\r\n                    owner: provider.wallet.publicKey,\r\n                    rewardAAccount: stakingPubkey,\r\n                    rewardBAccount: stakingPubkey,\r\n                    // Program signers.\r\n                    poolSigner,\r\n                    // Misc.\r\n                    clock: web3.SYSVAR_CLOCK_PUBKEY,\r\n                    tokenProgram: TOKEN_PROGRAM_ID,\r\n                },\r\n            });\r\n            toast.success(\"Claim PANDA successfully!\", { theme: \"dark\" });\r\n            setEarn(0.0);\r\n        } catch (e) {\r\n          toast.error(\"Transaction error, try again later!\", { theme: \"dark\" });\r\n        }\r\n\r\n        return await getTokenBalance(new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID));\r\n    }\r\n\r\n    async function fund(amountA) {\r\n        const provider = await getProvider()\r\n\r\n        const program = new Program(idl, programID, provider);\r\n\r\n        let pubkeyToUse = poolPubkey;\r\n        let poolObject = await program.account.pool.fetch(pubkeyToUse);\r\n\r\n        const stakingMintObject = new Token(\r\n            provider.connection,\r\n            new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID),\r\n            TOKEN_PROGRAM_ID,\r\n            provider.wallet.payer);\r\n        const stakingAccountInfo = await stakingMintObject.getOrCreateAssociatedAccountInfo(wallet.publicKey);\r\n        const stakingPubkey = stakingAccountInfo.address;\r\n\r\n        const [\r\n            _poolSigner,\r\n            _nonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [pubkeyToUse.toBuffer()],\r\n            programID\r\n        );\r\n        let poolSigner = _poolSigner;\r\n\r\n        await program.rpc.fund(\r\n            new BN(amountA * web3.LAMPORTS_PER_SOL),\r\n            new BN(0),\r\n            {\r\n                accounts: {\r\n                    // Stake instance.\r\n                    pool: pubkeyToUse,\r\n                    stakingVault: poolObject.stakingVault,\r\n                    rewardAVault: poolObject.rewardAVault,\r\n                    rewardBVault: poolObject.rewardBVault,\r\n                    funder: provider.wallet.publicKey,\r\n                    fromA: stakingPubkey,\r\n                    fromB: stakingPubkey,\r\n                    // Program signers.\r\n                    poolSigner,\r\n                    // Misc.\r\n                    clock: web3.SYSVAR_CLOCK_PUBKEY,\r\n                    tokenProgram: TOKEN_PROGRAM_ID,\r\n                },\r\n            });\r\n    }\r\n\r\n    async function getTokenBalance(pubkey) {\r\n        if (!wallet.publicKey) {\r\n            return 0;\r\n        }\r\n\r\n        const provider = await getProvider();\r\n        const tokens = await provider.connection.getTokenAccountsByOwner(wallet.publicKey, { mint: pubkey });\r\n        if (tokens.value.length == 0) {\r\n            return 0;\r\n        }\r\n        const token = tokens.value.pop();\r\n        const val = (await provider.connection.getTokenAccountBalance(token.pubkey)).value;\r\n        const balance = val.uiAmount;\r\n\r\n        return parseFloat(balance.toFixed(6));\r\n    }\r\n\r\n    async function getTotalStakedBalance(pubkey) {\r\n        const provider = await getProvider();\r\n\r\n        const [\r\n            _poolSigner,\r\n            _nonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n        let poolSigner = _poolSigner;\r\n\r\n        const tokens = await provider.connection.getTokenAccountsByOwner(\r\n            poolSigner, { mint: pubkey });\r\n\r\n        if (tokens.value.length == 0) {\r\n            return 0;\r\n        }\r\n        const token = tokens.value.pop();\r\n        const balance = (await provider.connection.getTokenAccountBalance(token.pubkey)).value.uiAmount.toFixed(6);\r\n        return parseFloat(balance);\r\n    }\r\n\r\n    async function getTotalUnstakedBalance(pubkey) {\r\n\r\n        const provider = await getProvider();\r\n        const tokens = await provider.connection.getTokenAccountsByOwner(\r\n            new PublicKey(process.env.REACT_APP_FUNDER), { mint: pubkey });\r\n\r\n        if (tokens.value.length == 0) {\r\n            return 0;\r\n        }\r\n        const token = tokens.value.pop();\r\n        const balance = (await provider.connection.getTokenAccountBalance(token.pubkey)).value.uiAmount.toFixed(6);\r\n\r\n        return parseFloat(balance);\r\n    }\r\n\r\n    async function getStakedBalance() {\r\n\r\n        const provider = await getProvider()\r\n\r\n        const program = new Program(idl, programID, provider);\r\n\r\n        const [\r\n            _userPubkey, _userNonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [wallet.publicKey.toBuffer(), poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n\r\n        try {\r\n            const accountData = await program.account.user.fetch(_userPubkey);\r\n            setStakeTimestamp(accountData.stakeTime.toNumber() * 1000);\r\n            return (Number.parseInt(accountData.balanceStaked.toString()) / web3.LAMPORTS_PER_SOL).toFixed(6);\r\n        } catch (e) {\r\n            console.log(e.message)\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    async function setMaxValue() {\r\n        setPandaStakeAmount(await getTokenBalance(new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID)));\r\n    }\r\n\r\n    async function setUnstakeMaxValue() {\r\n        setPandaUnstakeAmount(await getStakedBalance());\r\n    }\r\n\r\n    async function createStakeAccount() {\r\n        const provider = await getProvider();\r\n        const program = new Program(idl, programID, provider);\r\n\r\n        const [\r\n            _userPubkey, _userNonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [provider.wallet.publicKey.toBuffer(), poolPubkey.toBuffer()],\r\n            program.programId\r\n        );\r\n\r\n        try {\r\n            await program.rpc.createUser(_userNonce, {\r\n                accounts: {\r\n                    pool: poolPubkey,\r\n                    user: _userPubkey,\r\n                    owner: provider.wallet.publicKey,\r\n                    systemProgram: SystemProgram.programId,\r\n                },\r\n            });\r\n        } catch (e) {\r\n            if (e.message == 'failed to send transaction: Transaction simulation failed: Attempt to debit an account but found no record of a prior credit.') {\r\n                toast.error(\"You need to charge at least 0.00001 sol\", { theme: \"dark\" });\r\n            }\r\n        }\r\n    }\r\n\r\n    async function getEarned() {\r\n        const provider = await getProvider()\r\n        const program = new Program(idl, programID, provider);\r\n\r\n        if (wallet.publicKey === null) {\r\n            // setTimeout(() => {\r\n            //     getEarned();\r\n            // }, 1000)\r\n            return;\r\n        }\r\n\r\n        const [\r\n            _userPubkey, _userNonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [wallet.publicKey.toBuffer(), poolPubkey.toBuffer()],\r\n            programID\r\n        );\r\n\r\n        setBalance(await getTokenBalance(new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID)));\r\n        setStakedAmount(await getStakedBalance());\r\n        try {\r\n            const accountData = await program.account.user.fetch(_userPubkey);\r\n            let lastUpdated = accountData.lastUpdateTime.toNumber();\r\n            let now = parseInt((new Date()).getTime() / 1000);\r\n            let diff = now - lastUpdated;\r\n\r\n            let val = (Number.parseInt(accountData.rewardBRate.toString()) / web3.LAMPORTS_PER_SOL) * diff;\r\n            val += Number.parseInt(accountData.rewardB.toString()) / web3.LAMPORTS_PER_SOL;\r\n            setEarn(val.toFixed(6));\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    const refreshPage = async () => {\r\n\r\n        const balance = await getTotalStakedBalance(new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID));\r\n        setTotalStackedPHANT(balance);\r\n\r\n        // const ubalance = await getTotalUnstakedBalance(new PublicKey(process.env.REACT_APP_PHANT_STAKE_TOKEN_ID));\r\n        // setTotalUnstakedPHANT(ubalance);\r\n\r\n        await getEarned()\r\n\r\n        return () => {\r\n\r\n        }\r\n    }\r\n\r\n    useEffect(refreshPage, [wallet])\r\n\r\n    return (\r\n        <div>\r\n            <ToastContainer />\r\n            <h1 style={{textAlign: \"center\"}}>Staking Pool V1</h1>\r\n            <div className=\"css-3c6eg3\">\r\n                <div className=\"css-1m984bj\">\r\n                    <div className=\"css-1ipn2vc\">\r\n                        <div className=\"css-1irvasc\">\r\n                            <div className=\"chakra-stack css-keb7u0\">\r\n                                <div className=\"chakra-stat css-1mbo1ls\">\r\n                                    <dl>\r\n                                        <dt className=\"chakra-stat__label css-1ovag0s\">Wallet (balance: {balance})</dt>\r\n                                        <div className=\"chakra-stack css-1y05o36\">\r\n                                            <div>\r\n                                                <img width=\"35\" height=\"35\" sizes=\"(min-width: 35px) 35px, 100vw\" decoding=\"async\" src={pandaIcon} style={{ maxWidth: 45 }} />\r\n                                            </div>\r\n                                            <dd className=\"chakra-stat__number css-1u32qky\" style={{marginLeft: 10}}>\r\n                                                <div className=\"chakra-stack css-qf81zg\">\r\n                                                    <p>{` PANDA`}</p>\r\n                                                </div>\r\n                                            </dd>\r\n                                            <div style={{ marginLeft: 20 }}>\r\n                                              <span>{`Your reward: `}</span>\r\n                                              <span style={{fontWeight: \"bold\"}}>{earn}</span>\r\n                                              <span>{` PANDA`}</span>\r\n                                            </div>\r\n                                            <div style={{ marginLeft: 10, padding: 5, borderWidth: 1, borderStyle: 'solid', borderRadius: 5 }}>\r\n                                                <button onClick={(e) => claim()}>Claim now</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </dl>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {false && (\r\n                        <div className=\"css-17zb26e\">\r\n                            <div className=\"chakra-stack css-s7z0if\">\r\n                                <div className=\"chakra-stat css-1iodnbg\">\r\n                                    <dl>\r\n                                        <dt className=\"chakra-stat__label css-1cvxnhk\">Total staked</dt>\r\n                                        <div className=\"chakra-stack css-10iho9r\">\r\n                                            <div className=\"css-89leb0\">\r\n                                                <dd className=\"chakra-stat__number css-1loxz6u\">\r\n                                                    <div className=\"chakra-stack css-8320s1\">\r\n                                                        <div className=\"css-yslke8\">{totalStackedPHANT}</div>\r\n                                                        <p>PANDA</p>\r\n                                                    </div>\r\n                                                </dd>\r\n                                                {/*<dd className=\"chakra-stat__help-text css-o0h8lz\">≈ $1,477,119,462</dd>*/}\r\n                                            </div>\r\n                                        </div>\r\n                                    </dl>\r\n                                </div>\r\n                                <hr aria-orientation=\"vertical\" className=\"chakra-divider css-6cji22\"></hr>\r\n                                { false && (\r\n                                <div className=\"chakra-stat css-1sps1hr\">\r\n                                    <dl>\r\n                                        <dt className=\"chakra-stat__label css-1cvxnhk\">Unstake liquidity</dt>\r\n                                        <div className=\"chakra-stack css-10iho9r\">\r\n                                            <div className=\"css-1azbirj\">\r\n                                                <dd className=\"chakra-stat__number css-1loxz6u\">\r\n                                                    <div className=\"chakra-stack css-8320s1\">\r\n                                                        <div className=\"css-yslke8\">{totalUnstakedPHANT}</div>\r\n                                                        <p>PANDA</p>\r\n                                                    </div>\r\n                                                </dd>\r\n                                                {/*<dd className=\"chakra-stat__help-text css-o0h8lz\">≈ $110,578,305</dd>*/}\r\n                                            </div>\r\n                                        </div>\r\n                                    </dl>\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <div style={{ outline: 'none' }}>\r\n                    <div className=\"chakra-tabs css-8dg5nr\">\r\n                        <div role=\"tablist\" aria-orientation=\"horizontal\" className=\"chakra-tabs__tablist css-1wl24ee\">\r\n                            <button\r\n                                aria-selected={selectedTab == 0}\r\n                                className=\"chakra-tabs__tab css-o9kd5c\"\r\n                                onClick={(e) => setSelectedTab(0)}\r\n                            >Stake</button>\r\n                            <button\r\n                                aria-selected={selectedTab == 1}\r\n                                className=\"chakra-tabs__tab css-o9kd5c\"\r\n                                onClick={(e) => setSelectedTab(1)}\r\n                            >Unstake</button>\r\n                        </div>\r\n                        <div className=\"chakra-tabs__tab-panels css-1lglnv0\">\r\n                            <div className=\"chakra-tabs__tab-panel css-a5mhaz\" hidden={selectedTab !== 0}>\r\n                                <div className=\"chakra-stack css-1gl4x3w\">\r\n                                    <div className=\"chakra-stack css-100uh2e\">\r\n                                        <div className=\"css-1kw2fa0\">\r\n                                            <div className=\"chakra-tabs css-13o7eu2\">\r\n                                                <div style={{paddingTop: 10}}>\r\n                                                  {`Your staked amount: ${stakedAmount} PANDA`}\r\n                                                </div>\r\n                                                <div className=\"chakra-tabs__tab-panels css-8atqhb\">\r\n                                                    <div className=\"chakra-tabs__tab-panel css-n8lhb7\" hidden={selectedSTab !== 0}>\r\n                                                        <div className=\"css-0\">\r\n                                                            <div className=\"css-s7o7ur\">\r\n                                                                <div className=\"css-gg4vpm\">\r\n                                                                    <div className=\"chakra-stack css-1041bnj\">\r\n                                                                        <div data-gatsby-image-wrapper=\"\" className=\"gatsby-image-wrapper gatsby-image-wrapper-constrained\">\r\n                                                                            <div style={{ maxWidth: 20, display: 'block', width: 20, height: 20 }}>\r\n                                                                                <picture>\r\n                                                                                    <source type=\"image/svg\" src={pandaIcon} sizes=\"(min-width: 20px) 20px, 100vw\" />\r\n                                                                                    <img width=\"20\" height=\"20\" sizes=\"(min-width: 20px) 20px, 100vw\" decoding=\"async\" src={pandaIcon} alt=\"mSOL\" style={{ objectFit: 'cover', opacity: 1, maxWidth: 20 }} />\r\n                                                                                </picture>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                        <p className=\"chakra-text css-2ygcmq\">PANDA</p>\r\n                                                                    </div>\r\n                                                                    <div className=\"chakra-numberinput css-17wygfg\">\r\n                                                                        <input className=\"phantInput\" placeholder=\"0.0\" type=\"text\" value={pandaStakeAmount} onChange={e => setPandaStakeAmount(e.target.value)} />\r\n                                                                        <div className=\"chakra-input__right-element css-60m06v\">\r\n                                                                            <button\r\n                                                                                type=\"button\"\r\n                                                                                className=\"chakra-button css-4eg0af\"\r\n                                                                                onClick={e => setMaxValue()}\r\n                                                                            >MAX</button>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <button type=\"button\" className=\"chakra-button css-zu7fla\" onClick={() => stake()}>\r\n                                                                Stake\r\n                                                                <span className=\"chakra-button__icon css-1hzyiq5\">\r\n                                                                    <svg viewBox=\"0 0 24 24\" focusable=\"false\" className=\"chakra-icon css-onkibi\" aria-hidden=\"true\">\r\n                                                                        <path fill=\"currentColor\" d=\"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\"></path>\r\n                                                                    </svg>\r\n                                                                </span>\r\n                                                            </button>\r\n                                                            <div style={{fontSize: 12, marginTop: 10}}>Your PANDA will be locked for 30 days and you can claim reward anytime</div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"chakra-tabs__tab-panel css-n8lhb7\" hidden={selectedSTab !== 1}>\r\n                                                        <p>Your stake accounts will be shown here.</p>\r\n                                                        <p>You don't have any valid stake accounts.</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"chakra-tabs__tab-panel css-a5mhaz\" hidden={selectedTab !== 1}>\r\n                                <div className=\"chakra-stack css-1gl4x3w\">\r\n                                    <div className=\"chakra-stack css-100uh2e\">\r\n                                        <div className=\"css-1kw2fa0\">\r\n                                            <div className=\"chakra-tabs css-13o7eu2\">\r\n                                                <div style={{paddingTop: 10}}>\r\n                                                  {`Your staked amount: ${stakedAmount} PANDA`}\r\n                                                </div>\r\n                                                <div className=\"chakra-tabs__tab-panels css-8atqhb\">\r\n                                                    <div className=\"chakra-tabs__tab-panel css-n8lhb7\" hidden={selectedUSTab !== 0}>\r\n                                                        <div className=\"css-0\">\r\n                                                            <div className=\"css-s7o7ur\">\r\n                                                                <div className=\"css-gg4vpm\">\r\n                                                                    <div className=\"chakra-stack css-1041bnj\">\r\n                                                                        <div data-gatsby-image-wrapper=\"\" className=\"gatsby-image-wrapper gatsby-image-wrapper-constrained\">\r\n                                                                            <div style={{ maxWidth: 20, display: 'block', width: 20, height: 20 }}>\r\n                                                                                <picture>\r\n                                                                                    <source type=\"image/svg\" src={pandaIcon} sizes=\"(min-width: 20px) 20px, 100vw\" />\r\n                                                                                    <img width=\"20\" height=\"20\" sizes=\"(min-width: 20px) 20px, 100vw\" decoding=\"async\" src={pandaIcon} alt=\"mSOL\" style={{ objectFit: 'cover', opacity: 1, maxWidth: 20 }} />\r\n                                                                                </picture>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                        <p className=\"chakra-text css-2ygcmq\">PANDA</p>\r\n                                                                    </div>\r\n                                                                    <div className=\"chakra-numberinput css-17wygfg\">\r\n                                                                        <input className=\"phantInput\" placeholder=\"0.0\" type=\"text\" value={pandaUnstakeAmount} onChange={e => setPandaUnstakeAmount(e.target.value)} />\r\n                                                                        <div className=\"chakra-input__right-element css-60m06v\">\r\n                                                                            <button\r\n                                                                                type=\"button\"\r\n                                                                                className=\"chakra-button css-4eg0af\"\r\n                                                                                onClick={e => setUnstakeMaxValue()}\r\n                                                                            >MAX</button>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div>\r\n                                                              <span>You have to wait</span>\r\n                                                              <span>{\" \"}</span>\r\n                                                              <span style={{fontWeight: \"bold\"}}>\r\n                                                                <Countdown date={stakeTimestamp + 30 * 24 * 3600 * 1000} />\r\n                                                              </span>\r\n                                                              <span>{\" \"}</span>\r\n                                                              <span>to unstake</span>\r\n                                                            </div>\r\n                                                            <button disabled={stakeTimestamp + 30 * 24 * 3600 * 1000 > Date.now()} type=\"button\" className=\"chakra-button css-zu7fla\" onClick={() => unstake()}>\r\n                                                                Unstake now\r\n                                                                <span className=\"chakra-button__icon css-1hzyiq5\">\r\n                                                                    <svg viewBox=\"0 0 24 24\" focusable=\"false\" className=\"chakra-icon css-onkibi\" aria-hidden=\"true\">\r\n                                                                        <path fill=\"currentColor\" d=\"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\"></path>\r\n                                                                    </svg>\r\n                                                                </span>\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nimport Header from './components/header';\r\nimport Error404 from './errors/error404';\r\nimport Stake from './pages/stake';\r\nimport SolWalletProvider from './components/wallet';\r\nimport './styles/App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <SolWalletProvider>\r\n      <div className=\"App\">\r\n        <div style={{ outline: 'none' }}>\r\n          <div className=\"css-1r88i0x\">\r\n            <Header />\r\n            <Router>\r\n              <Switch>\r\n                <Route exact path=\"/\" component={Stake} />\r\n                <Route component={Error404} />\r\n              </Switch>\r\n            </Router>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </SolWalletProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}